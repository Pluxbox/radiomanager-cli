# radiomanager-cli completion                               -*- shell-script -*-

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! swagger-codegen (https://github.com/swagger-api/swagger-codegen)
# ! FROM SWAGGER SPECIFICATION IN JSON.
# !
# ! Generated on: 2019-02-01T15:41:55.138+01:00
# !
# !
# ! System wide installation:
# !
# ! $ sudo cp radiomanager-cli.bash-completion /etc/bash-completion.d/radiomanager-cli
# !
# !
# ! User home installation (add this line to .bash_profile):
# !
# ! [ -r ~/radiomanager-cli.bash-completion ] && source ~/radiomanager-cli.bash-completion
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


#
# Check if this is OSX, if so defined custom init_completion
#
if [[ `uname` =~ "Darwin" ]]; then
    __osx_init_completion()
    {
        COMPREPLY=()
        _get_comp_words_by_ref cur prev words cword
    }
fi

_radiomanager-cli()
{
    local cur
    local prev
    local words
    local cword

    # The reference of currently selected REST operation
    local operation=""

    # The list of available operation in the REST service
    # It's modelled as an associative array for efficient key lookup
    declare -A operations
    operations["getBlockById"]=1
    operations["getCurrentBlock"]=1
    operations["getNextBlock"]=1
    operations["listBlocks"]=1
    operations["createBroadcast"]=1
    operations["deleteBroadcastById"]=1
    operations["getBroadcastById"]=1
    operations["getCurrentBroadcast"]=1
    operations["getDailyEPG"]=1
    operations["getEPGByDate"]=1
    operations["getNextBroadcast"]=1
    operations["getWeeklyEPG"]=1
    operations["listBroadcasts"]=1
    operations["printBroadcastById"]=1
    operations["updateBroadcastByID"]=1
    operations["createCampaign"]=1
    operations["deleteCampaignById"]=1
    operations["getCampaignById"]=1
    operations["listCampaigns"]=1
    operations["updateCampaignByID"]=1
    operations["createContact"]=1
    operations["deleteContactById"]=1
    operations["getContactById"]=1
    operations["listContacts"]=1
    operations["updateContactByID"]=1
    operations["getGenreById"]=1
    operations["listGenres"]=1
    operations["createItem"]=1
    operations["currentItemPostStructure"]=1
    operations["currentItemPostTiming"]=1
    operations["deleteItemById"]=1
    operations["getCurrentItem"]=1
    operations["getItemById"]=1
    operations["listItems"]=1
    operations["playlistPostMerge"]=1
    operations["playlistPostStructure"]=1
    operations["playlistPostTiming"]=1
    operations["stopCurrentItem"]=1
    operations["updateItemById"]=1
    operations["getModelTypeById"]=1
    operations["listModelTypes"]=1
    operations["createPresenter"]=1
    operations["deletePresenterById"]=1
    operations["getPresenterById"]=1
    operations["listPresenters"]=1
    operations["updatePresenterByID"]=1
    operations["createProgram"]=1
    operations["deleteProgramById"]=1
    operations["getProgramById"]=1
    operations["listPrograms"]=1
    operations["updateProgramByID"]=1
    operations["getStation"]=1
    operations["createStory"]=1
    operations["deleteStoryById"]=1
    operations["getStoryById"]=1
    operations["listStories"]=1
    operations["updateStoryByID"]=1
    operations["getStringsByName"]=1
    operations["createTag"]=1
    operations["deleteTagById"]=1
    operations["getTagById"]=1
    operations["listTags"]=1
    operations["updateTagByID"]=1
    operations["deleteUserById"]=1
    operations["getUserById"]=1
    operations["inviteUserByMail"]=1
    operations["listUsers"]=1
    operations["getVisualSlide"]=1

    # An associative array of operations to their parameters
    # Only include path, query and header parameters
    declare -A operation_parameters
    operation_parameters["getBlockById"]="id= _external_station_id= "
    operation_parameters["getCurrentBlock"]=""
    operation_parameters["getNextBlock"]=""
    operation_parameters["listBlocks"]="page= broadcast_id= item_id= program_id= start-min= start-max= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["createBroadcast"]=""
    operation_parameters["deleteBroadcastById"]="id= "
    operation_parameters["getBroadcastById"]="id= _external_station_id= "
    operation_parameters["getCurrentBroadcast"]="withunpublished= "
    operation_parameters["getDailyEPG"]="date= withunpublished= "
    operation_parameters["getEPGByDate"]="date= withunpublished= "
    operation_parameters["getNextBroadcast"]="withunpublished= "
    operation_parameters["getWeeklyEPG"]="date= withunpublished= "
    operation_parameters["listBroadcasts"]="page= program_id= block_id= model_type_id= tag_id= presenter_id= genre_id= item_id= start-min= start-max= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["printBroadcastById"]="id= template_id= "
    operation_parameters["updateBroadcastByID"]="id= "
    operation_parameters["createCampaign"]=""
    operation_parameters["deleteCampaignById"]="id= "
    operation_parameters["getCampaignById"]="id= _external_station_id= "
    operation_parameters["listCampaigns"]="page= item_id= model_type_id= start-min= start-max= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["updateCampaignByID"]="id= "
    operation_parameters["createContact"]=""
    operation_parameters["deleteContactById"]="id= "
    operation_parameters["getContactById"]="id= _external_station_id= "
    operation_parameters["listContacts"]="page= item_id= model_type_id= tag_id= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["updateContactByID"]="id= "
    operation_parameters["getGenreById"]="id= _external_station_id= "
    operation_parameters["listGenres"]="page= parent_id= program_id= broadcast_id= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["createItem"]=""
    operation_parameters["currentItemPostStructure"]=""
    operation_parameters["currentItemPostTiming"]=""
    operation_parameters["deleteItemById"]="id= "
    operation_parameters["getCurrentItem"]="lastplayed= "
    operation_parameters["getItemById"]="id= _external_station_id= "
    operation_parameters["listItems"]="page= block_id= broadcast_id= model_type_id= tag_id= campaign_id= contact_id= program_draft_id= user_draft_id= station_draft_id= program_id= external_id= start-min= start-max= duration-min= duration-max= status= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["playlistPostMerge"]=""
    operation_parameters["playlistPostStructure"]=""
    operation_parameters["playlistPostTiming"]=""
    operation_parameters["stopCurrentItem"]=""
    operation_parameters["updateItemById"]="id= "
    operation_parameters["getModelTypeById"]="id= _external_station_id= "
    operation_parameters["listModelTypes"]="page= program_id= broadcast_id= item_id= campaign_id= presenter_id= contact_id= model= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["createPresenter"]=""
    operation_parameters["deletePresenterById"]="id= "
    operation_parameters["getPresenterById"]="id= _external_station_id= "
    operation_parameters["listPresenters"]="page= program_id= broadcast_id= model_type_id= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["updatePresenterByID"]="id= "
    operation_parameters["createProgram"]=""
    operation_parameters["deleteProgramById"]="id= "
    operation_parameters["getProgramById"]="id= _external_station_id= "
    operation_parameters["listPrograms"]="page= broadcast_id= model_type_id= tag_id= presenter_id= genre_id= block_id= item_id= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["updateProgramByID"]="id= "
    operation_parameters["getStation"]=""
    operation_parameters["createStory"]=""
    operation_parameters["deleteStoryById"]="id= "
    operation_parameters["getStoryById"]="id= _external_station_id= "
    operation_parameters["listStories"]="page= item_id= model_type_id= tag_id= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["updateStoryByID"]="id= "
    operation_parameters["getStringsByName"]="name= full_model= "
    operation_parameters["createTag"]=""
    operation_parameters["deleteTagById"]="id= "
    operation_parameters["getTagById"]="id= _external_station_id= "
    operation_parameters["listTags"]="page= program_id= item_id= broadcast_id= contact_id= limit= order-by= order-direction= _external_station_id= "
    operation_parameters["updateTagByID"]="id= "
    operation_parameters["deleteUserById"]="id= "
    operation_parameters["getUserById"]="id= "
    operation_parameters["inviteUserByMail"]=""
    operation_parameters["listUsers"]="page= role_id= limit= order-by= order-direction= "
    operation_parameters["getVisualSlide"]=""

    # An associative array of possible values for enum parameters
    declare -A operation_parameters_enum_values
    operation_parameters_enum_values["getCurrentBroadcast::withunpublished"]="true false"
    operation_parameters_enum_values["getDailyEPG::withunpublished"]="true false"
    operation_parameters_enum_values["getDailyEPG::withunpublished"]="true false"
    operation_parameters_enum_values["getEPGByDate::withunpublished"]="true false"
    operation_parameters_enum_values["getEPGByDate::withunpublished"]="true false"
    operation_parameters_enum_values["getNextBroadcast::withunpublished"]="true false"
    operation_parameters_enum_values["getWeeklyEPG::withunpublished"]="true false"
    operation_parameters_enum_values["getWeeklyEPG::withunpublished"]="true false"
    operation_parameters_enum_values["getCurrentItem::lastplayed"]="true false"
    operation_parameters_enum_values["getStringsByName::full_model"]="true false"
    operation_parameters_enum_values["getStringsByName::full_model"]="true false"

    #
    # Check if this is OSX and use special __osx_init_completion function
    #
    if [[ `uname` =~ "Darwin" ]]; then
        __osx_init_completion || return
    else
        _init_completion -s || return
    fi


    # Check if operation is already in the command line provided
    for word in "${words[@]}"; do
        if [[ -n $word && ${operations[$word]} ]]; then
            operation="${word}"
        fi
    done

    if [[ -z $operation ]]; then
        case $prev in
            --ciphers|--connect-timeout|-C|--continue-at|-F|--form|--form-string|\
            --ftp-account|--ftp-alternative-to-user|-P|--ftp-port|-H|--header|-h|\
            --help|--hostpubmd5|--keepalive-time|--krb|--limit-rate|--local-port|\
            --mail-from|--mail-rcpt|--max-filesize|--max-redirs|-m|--max-time|\
            --pass|--proto|--proto-redir|--proxy-user|--proxy1.0|-Q|--quote|-r|\
            --range|-X|--request|--retry|--retry-delay|--retry-max-time|\
            --socks5-gssapi-service|-t|--telnet-option|--tftp-blksize|-z|\
            --time-cond|--url|-u|--user|-A|--user-agent|-V|--version|-w|\
            --write-out|--resolve|--tlsuser|--tlspassword|--about)
                return
                ;;
            -K|--config|-b|--cookie|-c|--cookie-jar|-D|--dump-header|--egd-file|\
            --key|--libcurl|-o|--output|--random-file|-T|--upload-file|--trace|\
            --trace-ascii|--netrc-file)
                _filedir
                return
                ;;
            --cacert|-E|--cert)
                _filedir '@(c?(e)rt|cer|pem|der)'
                return
                ;;
            --capath)
                _filedir -d
                return
                ;;
            --cert-type|--key-type)
                COMPREPLY=( $( compgen -W 'DER PEM ENG' -- "$cur" ) )
                return
                ;;
            --crlfile)
                _filedir crl
                return
                ;;
            -d|--data|--data-ascii|--data-binary|--data-urlencode)
                if [[ $cur == \@* ]]; then
                    cur=${cur:1}
                    _filedir
                    COMPREPLY=( "${COMPREPLY[@]/#/@}" )
                fi
                return
                ;;
            --delegation)
                COMPREPLY=( $( compgen -W 'none policy always' -- "$cur" ) )
                return
                ;;
            --engine)
                COMPREPLY=( $( compgen -W 'list' -- "$cur" ) )
                return
                ;;
            --ftp-method)
                COMPREPLY=( $( compgen -W 'multicwd nocwd singlecwd' -- "$cur" ) )
                return
                ;;
            --ftp-ssl-ccc-mode)
                COMPREPLY=( $( compgen -W 'active passive' -- "$cur" ) )
                return
                ;;
            --interface)
                _available_interfaces -a
                return
                ;;
            -x|--proxy|--socks4|--socks4a|--socks5|--socks5-hostname)
                _known_hosts_real
                return
                ;;
            --pubkey)
                _filedir pub
                return
                ;;
            --stderr)
                COMPREPLY=( $( compgen -W '-' -- "$cur" ) )
                _filedir
                return
                ;;
            --tlsauthtype)
                COMPREPLY=( $( compgen -W 'SRP' -- "$cur" ) )
                return
                ;;
            --host)
                COMPREPLY=( $( compgen -W 'http:// https://' -- "$cur" ) )
                return
                ;;
            -ct|--content-type|-ac|--accept)
                COMPREPLY=( $( compgen -W '${!mime_type_abbreviations[*]}' -- "$cur" ) )
                return
                ;;
        esac
    fi

    #
    # Complete the server address based on ~/.ssh/known_hosts
    # and ~/.ssh/config
    #
    local prefix=${COMP_WORDS[COMP_CWORD-2]}
    local colon=${COMP_WORDS[COMP_CWORD-1]}
    if [[ "$colon" == ":" && ( $prefix == "https" || $prefix == "http" ) ]]; then
        COMPREPLY=()
        local comp_ssh_hosts=`[[ -f ~/.ssh/known_hosts ]] && \
                              ( cat ~/.ssh/known_hosts | \
                              grep '^[a-zA-Z0-9]' | \
                              cut -f 1 -d ' ' | \
                              sed -e s/,.*//g | \
                              grep -v ^# | \
                              uniq | \
                              grep -v "\[" ) ;
                              [[ -f ~/.ssh/config ]] && \
                              ( cat ~/.ssh/config | \
                              grep "^Host " | \
                              awk '{print $2}' )`
        COMPREPLY=( $( compgen -P '//' -W '${comp_ssh_hosts}' -- "${cur:2}") )
        return
    fi

    #
    # Complete the radiomanager-cli and cURL's arguments
    #
    if [[ $cur == -* ]]; then
        COMPREPLY=( $( compgen -W '$(_parse_help curl) $(_parse_help $1)' -- "$cur" ) )
        return
    fi

    #
    # If the argument starts with a letter this could be either an operation
    # or an operation parameter
    # When $cur is empty, suggest the list of operations by default
    #
    if [[ $cur =~ ^[A-Za-z_0-9]* ]]; then
        # If operation has not been yet selected, suggest the list of operations
        # otherwise suggest arguments of this operation as declared in the
        # Swagger specification
        if [[ -z $operation ]]; then
            COMPREPLY=( $(compgen -W '${!operations[*]}' -- ${cur}) )
        else
            COMPREPLY=( $(compgen -W '${operation_parameters[$operation]}' -- ${cur}) )
            compopt -o nospace
        fi
        return
    fi

} &&
complete -F _radiomanager-cli radiomanager-cli

# ex: ts=4 sw=4 et filetype=sh
